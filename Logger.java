 

import java.util.ArrayList;
import java.util.List;

/**
 * Write all the messages generated by the program in their different places.
 */
public class Logger implements OutputClass {

    /** Static instance of the singleton. */
    private static Logger instance;

    /**
     * List of output operations to do for each message.
     */
    private List<OutputClass> operations;;

    /**
     * Gets the single instance of Logger.
     *
     * @return single instance of Logger
     */
    public static Logger getInstance() {
        if (instance == null)
            instance = new Logger();
        return instance;
    }

    /**
     * Private default constructor to fit the Singleton pattern.
     */
    private Logger() {
        operations = new ArrayList<OutputClass>();
    }

    /**
     * Add a new group of operations.
     *
     * @param operation The group of operations to add.
     */
    public void addOutputClass(OutputClass operation) {
        operations.add(operation);
    }

    /**
     * Finish write.
     */
    @Override
    public void finishWrite() {
        for (OutputClass operation : operations)
            operation.finishWrite();
    }

    /**
     * Resets the logger.
     */
    public void reset() {
        operations.clear();
    }

    /**
     * Write.
     *
     * @param message the message
     */
    @Override
    public void write(String message) {
        for (OutputClass operation : operations)
            operation.write(message);
    }

}
